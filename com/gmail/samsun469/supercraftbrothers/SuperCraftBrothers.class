package com.gmail.samsun469.supercraftbrothers;

import com.gmail.samsun469.supercraftbrothers.managers.ArenaManager;
import com.gmail.samsun469.supercraftbrothers.managers.ColorManager;
import com.gmail.samsun469.supercraftbrothers.managers.CommandManager;
import com.gmail.samsun469.supercraftbrothers.managers.ConfigManager;
import com.gmail.samsun469.supercraftbrothers.managers.InventoryManager;
import com.gmail.samsun469.supercraftbrothers.managers.ItemManager;
import com.gmail.samsun469.supercraftbrothers.managers.ListenerManager;
import com.gmail.samsun469.supercraftbrothers.managers.PlayerManager;
import com.gmail.samsun469.supercraftbrothers.managers.RankManager;
import com.gmail.samsun469.supercraftbrothers.managers.StatsManager;
import com.gmail.samsun469.supercraftbrothers.menus.ClassMenu;
import com.gmail.samsun469.supercraftbrothers.utilities.Updater;
import com.gmail.samsun469.supercraftbrothers.utilities.Updater.UpdateType;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.logging.Logger;
import net.milkbowl.vault.economy.Economy;
import org.bukkit.Bukkit;
import org.bukkit.Server;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.RegisteredServiceProvider;
import org.bukkit.plugin.ServicesManager;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitScheduler;

public class SuperCraftBrothers
  extends JavaPlugin
{
  private static SuperCraftBrothers instance;
  
  public static SuperCraftBrothers getInstance()
  {
    return instance;
  }
  
  public static Economy getEcon()
  {
    return econ;
  }
  
  public boolean vault = false;
  public String name;
  public static YamlConfiguration LANG;
  public static File LANG_FILE;
  public static Economy econ = null;
  
  public void onEnable()
  {
    saveDefaultConfig();
    instance = this;
    if (!getConfig().isBoolean("first-run"))
    {
      saveResource("ranks\\DEFAULT.yml", false);
      saveResource("ranks\\VIP.yml", false);
      saveResource("ranks\\PRO.yml", false);
      saveResource("colors.yml", false);
      getConfig().set("first-run", Boolean.valueOf(false));
      getConfig().set("enabled-ranks", Arrays.asList(new String[] { "DEFAULT", "VIP", "PRO" }));
      saveConfig();
    }
    new ListenerManager(this);
    new CommandManager(this);
    new ArenaManager(this);
    new Schedulers(this);
    new PlayerManager(this);
    new InventoryManager(this);
    new ClassMenu(this);
    new ConfigManager(this);
    new RankManager(this);
    new ItemManager(this);
    new ColorManager(this);
    


    loadLang();
    if (!setupEcon())
    {
      if (ConfigManager.vault)
      {
        getLogger().severe("Vault not enabled because it could not be found!");
        ConfigManager.vault = false;
        this.vault = false;
      }
    }
    else {
      this.vault = true;
    }
  }
  
  public void onDisable()
  {
    instance = null;
    getServer().getScheduler().cancelTasks(this);
  }
  
  public void reloadCfg()
  {
    ArenaManager.reloadCfg();
    Bukkit.getPluginManager().disablePlugin(this);
    Bukkit.getPluginManager().enablePlugin(this);
  }
  
  public void update()
  {
    new Updater(this, "scb", getFile(), Updater.UpdateType.NO_VERSION_CHECK, true);
  }
  
  public FileConfiguration getPlayerConfig(String p)
  {
    File file = new File(getDataFolder() + File.separator + "users" + File.separator + p + ".yml");
    if (!file.exists()) {
      StatsManager.createPlayerFile(p);
    }
    FileConfiguration c = YamlConfiguration.loadConfiguration(file);
    return c;
  }
  
  public String getPlayerFile(String p)
  {
    return getDataFolder() + File.separator + "users" + File.separator + p + ".yml";
  }
  
  public boolean setupEcon()
  {
    if (getServer().getPluginManager().getPlugin("Vault") == null) {
      return false;
    }
    RegisteredServiceProvider<Economy> rsp = getServer().getServicesManager().getRegistration(Economy.class);
    if (rsp == null) {
      return false;
    }
    econ = (Economy)rsp.getProvider();
    return econ != null;
  }
  
  public void loadLang()
  {
    File lang = new File(getDataFolder(), "lang.yml");
    if (!lang.exists()) {
      try
      {
        lang.createNewFile();
        InputStream defConfigStream = getResource("lang.yml");
        if (defConfigStream != null)
        {
          YamlConfiguration defConfig = YamlConfiguration.loadConfiguration(defConfigStream);
          defConfig.save(lang);
          Lang.setFile(defConfig);
        }
      }
      catch (IOException e)
      {
        e.printStackTrace();
        getLogger().severe("Failed to save lang.yml.");
        setEnabled(false);
      }
    }
    YamlConfiguration conf = YamlConfiguration.loadConfiguration(lang);
    for (Lang item : Lang.values()) {
      if (conf.getString(item.getPath()) == null) {
        conf.set(item.getPath(), item.getDefault());
      }
    }
    Lang.setFile(conf);
    LANG = conf;
    LANG_FILE = lang;
    try
    {
      conf.save(lang);
    }
    catch (IOException e)
    {
      getLogger().warning("Failed to save lang.yml.");
      e.printStackTrace();
    }
  }
  
  public File getLangFile()
  {
    return LANG_FILE;
  }
  
  public FileConfiguration getLangConfig()
  {
    return LANG;
  }
}
